/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ext.portlet.pin.model.impl;

import com.ext.portlet.pin.model.Categoria;
import com.ext.portlet.pin.model.CategoriaModel;
import com.ext.portlet.pin.model.CategoriaSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Categoria service. Represents a row in the &quot;Categoria&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.pin.model.CategoriaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoriaImpl}.
 * </p>
 *
 * @author arodriguez
 * @see CategoriaImpl
 * @see com.ext.portlet.pin.model.Categoria
 * @see com.ext.portlet.pin.model.CategoriaModel
 * @generated
 */
@JSON(strict = true)
public class CategoriaModelImpl extends BaseModelImpl<Categoria>
	implements CategoriaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a categoria model instance should use the {@link com.ext.portlet.pin.model.Categoria} interface instead.
	 */
	public static final String TABLE_NAME = "Categoria";
	public static final Object[][] TABLE_COLUMNS = {
			{ "Codigo_categoria", Types.BIGINT },
			{ "Id_image", Types.BIGINT },
			{ "Nombre", Types.VARCHAR },
			{ "Estado", Types.BOOLEAN },
			{ "Descripcion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Categoria (Codigo_categoria LONG not null primary key IDENTITY,Id_image LONG,Nombre VARCHAR(75) null,Estado BOOLEAN,Descripcion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Categoria";
	public static final String DATA_SOURCE = "pinDataSource";
	public static final String SESSION_FACTORY = "pinSessionFactory";
	public static final String TX_MANAGER = "pinTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ext.portlet.pin.model.Categoria"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ext.portlet.pin.model.Categoria"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Categoria toModel(CategoriaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Categoria model = new CategoriaImpl();

		model.setCategoriaId(soapModel.getCategoriaId());
		model.setIdImagen(soapModel.getIdImagen());
		model.setNombre(soapModel.getNombre());
		model.setEstado(soapModel.getEstado());
		model.setDescripcion(soapModel.getDescripcion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Categoria> toModels(CategoriaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Categoria> models = new ArrayList<Categoria>(soapModels.length);

		for (CategoriaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ext.portlet.pin.model.Categoria"));

	public CategoriaModelImpl() {
	}

	public long getPrimaryKey() {
		return _categoriaId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCategoriaId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_categoriaId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Categoria.class;
	}

	public String getModelClassName() {
		return Categoria.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("categoriaId", getCategoriaId());
		attributes.put("idImagen", getIdImagen());
		attributes.put("nombre", getNombre());
		attributes.put("estado", getEstado());
		attributes.put("descripcion", getDescripcion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long categoriaId = (Long)attributes.get("categoriaId");

		if (categoriaId != null) {
			setCategoriaId(categoriaId);
		}

		Long idImagen = (Long)attributes.get("idImagen");

		if (idImagen != null) {
			setIdImagen(idImagen);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}

		Boolean estado = (Boolean)attributes.get("estado");

		if (estado != null) {
			setEstado(estado);
		}

		String descripcion = (String)attributes.get("descripcion");

		if (descripcion != null) {
			setDescripcion(descripcion);
		}
	}

	@JSON
	public long getCategoriaId() {
		return _categoriaId;
	}

	public void setCategoriaId(long categoriaId) {
		_categoriaId = categoriaId;
	}

	@JSON
	public long getIdImagen() {
		return _idImagen;
	}

	public void setIdImagen(long idImagen) {
		_idImagen = idImagen;
	}

	@JSON
	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	public void setNombre(String nombre) {
		_nombre = nombre;
	}

	@JSON
	public boolean getEstado() {
		return _estado;
	}

	public boolean isEstado() {
		return _estado;
	}

	public void setEstado(boolean estado) {
		_estado = estado;
	}

	@JSON
	public String getDescripcion() {
		if (_descripcion == null) {
			return StringPool.BLANK;
		}
		else {
			return _descripcion;
		}
	}

	public void setDescripcion(String descripcion) {
		_descripcion = descripcion;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Categoria.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Categoria toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Categoria)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CategoriaImpl categoriaImpl = new CategoriaImpl();

		categoriaImpl.setCategoriaId(getCategoriaId());
		categoriaImpl.setIdImagen(getIdImagen());
		categoriaImpl.setNombre(getNombre());
		categoriaImpl.setEstado(getEstado());
		categoriaImpl.setDescripcion(getDescripcion());

		categoriaImpl.resetOriginalValues();

		return categoriaImpl;
	}

	public int compareTo(Categoria categoria) {
		long primaryKey = categoria.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Categoria categoria = null;

		try {
			categoria = (Categoria)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = categoria.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Categoria> toCacheModel() {
		CategoriaCacheModel categoriaCacheModel = new CategoriaCacheModel();

		categoriaCacheModel.categoriaId = getCategoriaId();

		categoriaCacheModel.idImagen = getIdImagen();

		categoriaCacheModel.nombre = getNombre();

		String nombre = categoriaCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			categoriaCacheModel.nombre = null;
		}

		categoriaCacheModel.estado = getEstado();

		categoriaCacheModel.descripcion = getDescripcion();

		String descripcion = categoriaCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			categoriaCacheModel.descripcion = null;
		}

		return categoriaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{categoriaId=");
		sb.append(getCategoriaId());
		sb.append(", idImagen=");
		sb.append(getIdImagen());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append(", estado=");
		sb.append(getEstado());
		sb.append(", descripcion=");
		sb.append(getDescripcion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.ext.portlet.pin.model.Categoria");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>categoriaId</column-name><column-value><![CDATA[");
		sb.append(getCategoriaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idImagen</column-name><column-value><![CDATA[");
		sb.append(getIdImagen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>estado</column-name><column-value><![CDATA[");
		sb.append(getEstado());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descripcion</column-name><column-value><![CDATA[");
		sb.append(getDescripcion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Categoria.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Categoria.class
		};
	private long _categoriaId;
	private long _idImagen;
	private String _nombre;
	private boolean _estado;
	private String _descripcion;
	private Categoria _escapedModelProxy;
}