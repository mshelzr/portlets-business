/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ext.portlet.halcon.model.impl;

import com.ext.portlet.halcon.model.LogIncidencias;
import com.ext.portlet.halcon.model.LogIncidenciasModel;
import com.ext.portlet.halcon.model.LogIncidenciasSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LogIncidencias service. Represents a row in the &quot;T_ERROR_LOG&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.halcon.model.LogIncidenciasModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogIncidenciasImpl}.
 * </p>
 *
 * @author Infonet-Consulting
 * @see LogIncidenciasImpl
 * @see com.ext.portlet.halcon.model.LogIncidencias
 * @see com.ext.portlet.halcon.model.LogIncidenciasModel
 * @generated
 */
@JSON(strict = true)
public class LogIncidenciasModelImpl extends BaseModelImpl<LogIncidencias>
	implements LogIncidenciasModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log incidencias model instance should use the {@link com.ext.portlet.halcon.model.LogIncidencias} interface instead.
	 */
	public static final String TABLE_NAME = "T_ERROR_LOG";
	public static final Object[][] TABLE_COLUMNS = {
			{ "erlg_IdErrorLog", Types.BIGINT },
			{ "erlg_MensajeError", Types.VARCHAR },
			{ "loge_Parametro", Types.VARCHAR },
			{ "erlg_IdSessionVisitante", Types.VARCHAR },
			{ "erlg_TipoNumDoc", Types.VARCHAR },
			{ "erlg_IP", Types.VARCHAR },
			{ "erlg_FechaHoraError", Types.TIMESTAMP },
			{ "erlg_TrazaError", Types.VARCHAR },
			{ "erlgPaginaHija", Types.VARCHAR },
			{ "erlg_UserId", Types.VARCHAR },
			{ "erlg_UserName", Types.VARCHAR },
			{ "erlg_RecursoId", Types.VARCHAR },
			{ "erlg_RecursoName", Types.VARCHAR },
			{ "erlg_RecursoAction", Types.VARCHAR },
			{ "erlg_CreateDate", Types.TIMESTAMP },
			{ "erlg_ClienteHost", Types.VARCHAR },
			{ "erlg_ServerName", Types.VARCHAR },
			{ "erlg_ServerId", Types.VARCHAR },
			{ "erlg_AdditionalInformation", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table T_ERROR_LOG (erlg_IdErrorLog LONG not null primary key IDENTITY,erlg_MensajeError VARCHAR(75) null,loge_Parametro VARCHAR(75) null,erlg_IdSessionVisitante VARCHAR(75) null,erlg_TipoNumDoc VARCHAR(75) null,erlg_IP VARCHAR(75) null,erlg_FechaHoraError DATE null,erlg_TrazaError VARCHAR(75) null,erlgPaginaHija VARCHAR(75) null,erlg_UserId VARCHAR(75) null,erlg_UserName VARCHAR(75) null,erlg_RecursoId VARCHAR(75) null,erlg_RecursoName VARCHAR(75) null,erlg_RecursoAction VARCHAR(75) null,erlg_CreateDate DATE null,erlg_ClienteHost VARCHAR(75) null,erlg_ServerName VARCHAR(75) null,erlg_ServerId VARCHAR(75) null,erlg_AdditionalInformation VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table T_ERROR_LOG";
	public static final String DATA_SOURCE = "halconDataSource";
	public static final String SESSION_FACTORY = "halconSessionFactory";
	public static final String TX_MANAGER = "halconTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ext.portlet.halcon.model.LogIncidencias"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ext.portlet.halcon.model.LogIncidencias"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LogIncidencias toModel(LogIncidenciasSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LogIncidencias model = new LogIncidenciasImpl();

		model.setIdError(soapModel.getIdError());
		model.setMensajeError(soapModel.getMensajeError());
		model.setParametro(soapModel.getParametro());
		model.setIdSessionVisitante(soapModel.getIdSessionVisitante());
		model.setTipoNumDoc(soapModel.getTipoNumDoc());
		model.setIP(soapModel.getIP());
		model.setFechaHoraError(soapModel.getFechaHoraError());
		model.setTrazaError(soapModel.getTrazaError());
		model.setPaginaHija(soapModel.getPaginaHija());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setRecursoId(soapModel.getRecursoId());
		model.setRecursoName(soapModel.getRecursoName());
		model.setRecursoAction(soapModel.getRecursoAction());
		model.setCreateDate(soapModel.getCreateDate());
		model.setClienteHost(soapModel.getClienteHost());
		model.setServerName(soapModel.getServerName());
		model.setServerId(soapModel.getServerId());
		model.setAdditionalInformation(soapModel.getAdditionalInformation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LogIncidencias> toModels(LogIncidenciasSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LogIncidencias> models = new ArrayList<LogIncidencias>(soapModels.length);

		for (LogIncidenciasSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ext.portlet.halcon.model.LogIncidencias"));

	public LogIncidenciasModelImpl() {
	}

	public long getPrimaryKey() {
		return _idError;
	}

	public void setPrimaryKey(long primaryKey) {
		setIdError(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_idError);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LogIncidencias.class;
	}

	public String getModelClassName() {
		return LogIncidencias.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idError", getIdError());
		attributes.put("mensajeError", getMensajeError());
		attributes.put("parametro", getParametro());
		attributes.put("idSessionVisitante", getIdSessionVisitante());
		attributes.put("tipoNumDoc", getTipoNumDoc());
		attributes.put("IP", getIP());
		attributes.put("fechaHoraError", getFechaHoraError());
		attributes.put("trazaError", getTrazaError());
		attributes.put("paginaHija", getPaginaHija());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("recursoId", getRecursoId());
		attributes.put("recursoName", getRecursoName());
		attributes.put("recursoAction", getRecursoAction());
		attributes.put("createDate", getCreateDate());
		attributes.put("clienteHost", getClienteHost());
		attributes.put("serverName", getServerName());
		attributes.put("serverId", getServerId());
		attributes.put("additionalInformation", getAdditionalInformation());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idError = (Long)attributes.get("idError");

		if (idError != null) {
			setIdError(idError);
		}

		String mensajeError = (String)attributes.get("mensajeError");

		if (mensajeError != null) {
			setMensajeError(mensajeError);
		}

		String parametro = (String)attributes.get("parametro");

		if (parametro != null) {
			setParametro(parametro);
		}

		String idSessionVisitante = (String)attributes.get("idSessionVisitante");

		if (idSessionVisitante != null) {
			setIdSessionVisitante(idSessionVisitante);
		}

		String tipoNumDoc = (String)attributes.get("tipoNumDoc");

		if (tipoNumDoc != null) {
			setTipoNumDoc(tipoNumDoc);
		}

		String IP = (String)attributes.get("IP");

		if (IP != null) {
			setIP(IP);
		}

		Date fechaHoraError = (Date)attributes.get("fechaHoraError");

		if (fechaHoraError != null) {
			setFechaHoraError(fechaHoraError);
		}

		String trazaError = (String)attributes.get("trazaError");

		if (trazaError != null) {
			setTrazaError(trazaError);
		}

		String paginaHija = (String)attributes.get("paginaHija");

		if (paginaHija != null) {
			setPaginaHija(paginaHija);
		}

		String userId = (String)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String recursoId = (String)attributes.get("recursoId");

		if (recursoId != null) {
			setRecursoId(recursoId);
		}

		String recursoName = (String)attributes.get("recursoName");

		if (recursoName != null) {
			setRecursoName(recursoName);
		}

		String recursoAction = (String)attributes.get("recursoAction");

		if (recursoAction != null) {
			setRecursoAction(recursoAction);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String clienteHost = (String)attributes.get("clienteHost");

		if (clienteHost != null) {
			setClienteHost(clienteHost);
		}

		String serverName = (String)attributes.get("serverName");

		if (serverName != null) {
			setServerName(serverName);
		}

		String serverId = (String)attributes.get("serverId");

		if (serverId != null) {
			setServerId(serverId);
		}

		String additionalInformation = (String)attributes.get(
				"additionalInformation");

		if (additionalInformation != null) {
			setAdditionalInformation(additionalInformation);
		}
	}

	@JSON
	public long getIdError() {
		return _idError;
	}

	public void setIdError(long idError) {
		_idError = idError;
	}

	@JSON
	public String getMensajeError() {
		if (_mensajeError == null) {
			return StringPool.BLANK;
		}
		else {
			return _mensajeError;
		}
	}

	public void setMensajeError(String mensajeError) {
		_mensajeError = mensajeError;
	}

	@JSON
	public String getParametro() {
		if (_parametro == null) {
			return StringPool.BLANK;
		}
		else {
			return _parametro;
		}
	}

	public void setParametro(String parametro) {
		_parametro = parametro;
	}

	@JSON
	public String getIdSessionVisitante() {
		if (_idSessionVisitante == null) {
			return StringPool.BLANK;
		}
		else {
			return _idSessionVisitante;
		}
	}

	public void setIdSessionVisitante(String idSessionVisitante) {
		_idSessionVisitante = idSessionVisitante;
	}

	@JSON
	public String getTipoNumDoc() {
		if (_tipoNumDoc == null) {
			return StringPool.BLANK;
		}
		else {
			return _tipoNumDoc;
		}
	}

	public void setTipoNumDoc(String tipoNumDoc) {
		_tipoNumDoc = tipoNumDoc;
	}

	@JSON
	public String getIP() {
		if (_IP == null) {
			return StringPool.BLANK;
		}
		else {
			return _IP;
		}
	}

	public void setIP(String IP) {
		_IP = IP;
	}

	@JSON
	public Date getFechaHoraError() {
		return _fechaHoraError;
	}

	public void setFechaHoraError(Date fechaHoraError) {
		_fechaHoraError = fechaHoraError;
	}

	@JSON
	public String getTrazaError() {
		if (_trazaError == null) {
			return StringPool.BLANK;
		}
		else {
			return _trazaError;
		}
	}

	public void setTrazaError(String trazaError) {
		_trazaError = trazaError;
	}

	@JSON
	public String getPaginaHija() {
		if (_paginaHija == null) {
			return StringPool.BLANK;
		}
		else {
			return _paginaHija;
		}
	}

	public void setPaginaHija(String paginaHija) {
		_paginaHija = paginaHija;
	}

	@JSON
	public String getUserId() {
		if (_userId == null) {
			return StringPool.BLANK;
		}
		else {
			return _userId;
		}
	}

	public void setUserId(String userId) {
		_userId = userId;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public String getRecursoId() {
		if (_recursoId == null) {
			return StringPool.BLANK;
		}
		else {
			return _recursoId;
		}
	}

	public void setRecursoId(String recursoId) {
		_recursoId = recursoId;
	}

	@JSON
	public String getRecursoName() {
		if (_recursoName == null) {
			return StringPool.BLANK;
		}
		else {
			return _recursoName;
		}
	}

	public void setRecursoName(String recursoName) {
		_recursoName = recursoName;
	}

	@JSON
	public String getRecursoAction() {
		if (_recursoAction == null) {
			return StringPool.BLANK;
		}
		else {
			return _recursoAction;
		}
	}

	public void setRecursoAction(String recursoAction) {
		_recursoAction = recursoAction;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public String getClienteHost() {
		if (_clienteHost == null) {
			return StringPool.BLANK;
		}
		else {
			return _clienteHost;
		}
	}

	public void setClienteHost(String clienteHost) {
		_clienteHost = clienteHost;
	}

	@JSON
	public String getServerName() {
		if (_serverName == null) {
			return StringPool.BLANK;
		}
		else {
			return _serverName;
		}
	}

	public void setServerName(String serverName) {
		_serverName = serverName;
	}

	@JSON
	public String getServerId() {
		if (_serverId == null) {
			return StringPool.BLANK;
		}
		else {
			return _serverId;
		}
	}

	public void setServerId(String serverId) {
		_serverId = serverId;
	}

	@JSON
	public String getAdditionalInformation() {
		if (_additionalInformation == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalInformation;
		}
	}

	public void setAdditionalInformation(String additionalInformation) {
		_additionalInformation = additionalInformation;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LogIncidencias.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogIncidencias toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LogIncidencias)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LogIncidenciasImpl logIncidenciasImpl = new LogIncidenciasImpl();

		logIncidenciasImpl.setIdError(getIdError());
		logIncidenciasImpl.setMensajeError(getMensajeError());
		logIncidenciasImpl.setParametro(getParametro());
		logIncidenciasImpl.setIdSessionVisitante(getIdSessionVisitante());
		logIncidenciasImpl.setTipoNumDoc(getTipoNumDoc());
		logIncidenciasImpl.setIP(getIP());
		logIncidenciasImpl.setFechaHoraError(getFechaHoraError());
		logIncidenciasImpl.setTrazaError(getTrazaError());
		logIncidenciasImpl.setPaginaHija(getPaginaHija());
		logIncidenciasImpl.setUserId(getUserId());
		logIncidenciasImpl.setUserName(getUserName());
		logIncidenciasImpl.setRecursoId(getRecursoId());
		logIncidenciasImpl.setRecursoName(getRecursoName());
		logIncidenciasImpl.setRecursoAction(getRecursoAction());
		logIncidenciasImpl.setCreateDate(getCreateDate());
		logIncidenciasImpl.setClienteHost(getClienteHost());
		logIncidenciasImpl.setServerName(getServerName());
		logIncidenciasImpl.setServerId(getServerId());
		logIncidenciasImpl.setAdditionalInformation(getAdditionalInformation());

		logIncidenciasImpl.resetOriginalValues();

		return logIncidenciasImpl;
	}

	public int compareTo(LogIncidencias logIncidencias) {
		long primaryKey = logIncidencias.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LogIncidencias logIncidencias = null;

		try {
			logIncidencias = (LogIncidencias)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = logIncidencias.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LogIncidencias> toCacheModel() {
		LogIncidenciasCacheModel logIncidenciasCacheModel = new LogIncidenciasCacheModel();

		logIncidenciasCacheModel.idError = getIdError();

		logIncidenciasCacheModel.mensajeError = getMensajeError();

		String mensajeError = logIncidenciasCacheModel.mensajeError;

		if ((mensajeError != null) && (mensajeError.length() == 0)) {
			logIncidenciasCacheModel.mensajeError = null;
		}

		logIncidenciasCacheModel.parametro = getParametro();

		String parametro = logIncidenciasCacheModel.parametro;

		if ((parametro != null) && (parametro.length() == 0)) {
			logIncidenciasCacheModel.parametro = null;
		}

		logIncidenciasCacheModel.idSessionVisitante = getIdSessionVisitante();

		String idSessionVisitante = logIncidenciasCacheModel.idSessionVisitante;

		if ((idSessionVisitante != null) && (idSessionVisitante.length() == 0)) {
			logIncidenciasCacheModel.idSessionVisitante = null;
		}

		logIncidenciasCacheModel.tipoNumDoc = getTipoNumDoc();

		String tipoNumDoc = logIncidenciasCacheModel.tipoNumDoc;

		if ((tipoNumDoc != null) && (tipoNumDoc.length() == 0)) {
			logIncidenciasCacheModel.tipoNumDoc = null;
		}

		logIncidenciasCacheModel.IP = getIP();

		String IP = logIncidenciasCacheModel.IP;

		if ((IP != null) && (IP.length() == 0)) {
			logIncidenciasCacheModel.IP = null;
		}

		Date fechaHoraError = getFechaHoraError();

		if (fechaHoraError != null) {
			logIncidenciasCacheModel.fechaHoraError = fechaHoraError.getTime();
		}
		else {
			logIncidenciasCacheModel.fechaHoraError = Long.MIN_VALUE;
		}

		logIncidenciasCacheModel.trazaError = getTrazaError();

		String trazaError = logIncidenciasCacheModel.trazaError;

		if ((trazaError != null) && (trazaError.length() == 0)) {
			logIncidenciasCacheModel.trazaError = null;
		}

		logIncidenciasCacheModel.paginaHija = getPaginaHija();

		String paginaHija = logIncidenciasCacheModel.paginaHija;

		if ((paginaHija != null) && (paginaHija.length() == 0)) {
			logIncidenciasCacheModel.paginaHija = null;
		}

		logIncidenciasCacheModel.userId = getUserId();

		String userId = logIncidenciasCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			logIncidenciasCacheModel.userId = null;
		}

		logIncidenciasCacheModel.userName = getUserName();

		String userName = logIncidenciasCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			logIncidenciasCacheModel.userName = null;
		}

		logIncidenciasCacheModel.recursoId = getRecursoId();

		String recursoId = logIncidenciasCacheModel.recursoId;

		if ((recursoId != null) && (recursoId.length() == 0)) {
			logIncidenciasCacheModel.recursoId = null;
		}

		logIncidenciasCacheModel.recursoName = getRecursoName();

		String recursoName = logIncidenciasCacheModel.recursoName;

		if ((recursoName != null) && (recursoName.length() == 0)) {
			logIncidenciasCacheModel.recursoName = null;
		}

		logIncidenciasCacheModel.recursoAction = getRecursoAction();

		String recursoAction = logIncidenciasCacheModel.recursoAction;

		if ((recursoAction != null) && (recursoAction.length() == 0)) {
			logIncidenciasCacheModel.recursoAction = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			logIncidenciasCacheModel.createDate = createDate.getTime();
		}
		else {
			logIncidenciasCacheModel.createDate = Long.MIN_VALUE;
		}

		logIncidenciasCacheModel.clienteHost = getClienteHost();

		String clienteHost = logIncidenciasCacheModel.clienteHost;

		if ((clienteHost != null) && (clienteHost.length() == 0)) {
			logIncidenciasCacheModel.clienteHost = null;
		}

		logIncidenciasCacheModel.serverName = getServerName();

		String serverName = logIncidenciasCacheModel.serverName;

		if ((serverName != null) && (serverName.length() == 0)) {
			logIncidenciasCacheModel.serverName = null;
		}

		logIncidenciasCacheModel.serverId = getServerId();

		String serverId = logIncidenciasCacheModel.serverId;

		if ((serverId != null) && (serverId.length() == 0)) {
			logIncidenciasCacheModel.serverId = null;
		}

		logIncidenciasCacheModel.additionalInformation = getAdditionalInformation();

		String additionalInformation = logIncidenciasCacheModel.additionalInformation;

		if ((additionalInformation != null) &&
				(additionalInformation.length() == 0)) {
			logIncidenciasCacheModel.additionalInformation = null;
		}

		return logIncidenciasCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{idError=");
		sb.append(getIdError());
		sb.append(", mensajeError=");
		sb.append(getMensajeError());
		sb.append(", parametro=");
		sb.append(getParametro());
		sb.append(", idSessionVisitante=");
		sb.append(getIdSessionVisitante());
		sb.append(", tipoNumDoc=");
		sb.append(getTipoNumDoc());
		sb.append(", IP=");
		sb.append(getIP());
		sb.append(", fechaHoraError=");
		sb.append(getFechaHoraError());
		sb.append(", trazaError=");
		sb.append(getTrazaError());
		sb.append(", paginaHija=");
		sb.append(getPaginaHija());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", recursoId=");
		sb.append(getRecursoId());
		sb.append(", recursoName=");
		sb.append(getRecursoName());
		sb.append(", recursoAction=");
		sb.append(getRecursoAction());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", clienteHost=");
		sb.append(getClienteHost());
		sb.append(", serverName=");
		sb.append(getServerName());
		sb.append(", serverId=");
		sb.append(getServerId());
		sb.append(", additionalInformation=");
		sb.append(getAdditionalInformation());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.ext.portlet.halcon.model.LogIncidencias");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idError</column-name><column-value><![CDATA[");
		sb.append(getIdError());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mensajeError</column-name><column-value><![CDATA[");
		sb.append(getMensajeError());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parametro</column-name><column-value><![CDATA[");
		sb.append(getParametro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idSessionVisitante</column-name><column-value><![CDATA[");
		sb.append(getIdSessionVisitante());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tipoNumDoc</column-name><column-value><![CDATA[");
		sb.append(getTipoNumDoc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>IP</column-name><column-value><![CDATA[");
		sb.append(getIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fechaHoraError</column-name><column-value><![CDATA[");
		sb.append(getFechaHoraError());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trazaError</column-name><column-value><![CDATA[");
		sb.append(getTrazaError());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paginaHija</column-name><column-value><![CDATA[");
		sb.append(getPaginaHija());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recursoId</column-name><column-value><![CDATA[");
		sb.append(getRecursoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recursoName</column-name><column-value><![CDATA[");
		sb.append(getRecursoName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recursoAction</column-name><column-value><![CDATA[");
		sb.append(getRecursoAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clienteHost</column-name><column-value><![CDATA[");
		sb.append(getClienteHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverName</column-name><column-value><![CDATA[");
		sb.append(getServerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverId</column-name><column-value><![CDATA[");
		sb.append(getServerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalInformation</column-name><column-value><![CDATA[");
		sb.append(getAdditionalInformation());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LogIncidencias.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LogIncidencias.class
		};
	private long _idError;
	private String _mensajeError;
	private String _parametro;
	private String _idSessionVisitante;
	private String _tipoNumDoc;
	private String _IP;
	private Date _fechaHoraError;
	private String _trazaError;
	private String _paginaHija;
	private String _userId;
	private String _userName;
	private String _recursoId;
	private String _recursoName;
	private String _recursoAction;
	private Date _createDate;
	private String _clienteHost;
	private String _serverName;
	private String _serverId;
	private String _additionalInformation;
	private LogIncidencias _escapedModelProxy;
}