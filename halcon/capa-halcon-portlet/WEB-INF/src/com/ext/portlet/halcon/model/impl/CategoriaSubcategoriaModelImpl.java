/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ext.portlet.halcon.model.impl;

import com.ext.portlet.halcon.model.CategoriaSubcategoria;
import com.ext.portlet.halcon.model.CategoriaSubcategoriaModel;
import com.ext.portlet.halcon.model.CategoriaSubcategoriaSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CategoriaSubcategoria service. Represents a row in the &quot;T_CATEGORIA_SUBCATEGORIA&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ext.portlet.halcon.model.CategoriaSubcategoriaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoriaSubcategoriaImpl}.
 * </p>
 *
 * @author Infonet-Consulting
 * @see CategoriaSubcategoriaImpl
 * @see com.ext.portlet.halcon.model.CategoriaSubcategoria
 * @see com.ext.portlet.halcon.model.CategoriaSubcategoriaModel
 * @generated
 */
@JSON(strict = true)
public class CategoriaSubcategoriaModelImpl extends BaseModelImpl<CategoriaSubcategoria>
	implements CategoriaSubcategoriaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a categoria subcategoria model instance should use the {@link com.ext.portlet.halcon.model.CategoriaSubcategoria} interface instead.
	 */
	public static final String TABLE_NAME = "T_CATEGORIA_SUBCATEGORIA";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ctsc_IdCategoriaSubCat", Types.BIGINT },
			{ "ctsc_IdCategoriaSubCatPadre", Types.INTEGER },
			{ "ctsc_Descripcion", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table T_CATEGORIA_SUBCATEGORIA (ctsc_IdCategoriaSubCat LONG not null primary key IDENTITY,ctsc_IdCategoriaSubCatPadre INTEGER,ctsc_Descripcion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table T_CATEGORIA_SUBCATEGORIA";
	public static final String DATA_SOURCE = "halconDataSource";
	public static final String SESSION_FACTORY = "halconSessionFactory";
	public static final String TX_MANAGER = "halconTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ext.portlet.halcon.model.CategoriaSubcategoria"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ext.portlet.halcon.model.CategoriaSubcategoria"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CategoriaSubcategoria toModel(
		CategoriaSubcategoriaSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CategoriaSubcategoria model = new CategoriaSubcategoriaImpl();

		model.setIdCategoriaSubCat(soapModel.getIdCategoriaSubCat());
		model.setIdCategoriaSubCatPadre(soapModel.getIdCategoriaSubCatPadre());
		model.setDescripcion(soapModel.getDescripcion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CategoriaSubcategoria> toModels(
		CategoriaSubcategoriaSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CategoriaSubcategoria> models = new ArrayList<CategoriaSubcategoria>(soapModels.length);

		for (CategoriaSubcategoriaSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ext.portlet.halcon.model.CategoriaSubcategoria"));

	public CategoriaSubcategoriaModelImpl() {
	}

	public long getPrimaryKey() {
		return _idCategoriaSubCat;
	}

	public void setPrimaryKey(long primaryKey) {
		setIdCategoriaSubCat(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_idCategoriaSubCat);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return CategoriaSubcategoria.class;
	}

	public String getModelClassName() {
		return CategoriaSubcategoria.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idCategoriaSubCat", getIdCategoriaSubCat());
		attributes.put("idCategoriaSubCatPadre", getIdCategoriaSubCatPadre());
		attributes.put("descripcion", getDescripcion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idCategoriaSubCat = (Long)attributes.get("idCategoriaSubCat");

		if (idCategoriaSubCat != null) {
			setIdCategoriaSubCat(idCategoriaSubCat);
		}

		Integer idCategoriaSubCatPadre = (Integer)attributes.get(
				"idCategoriaSubCatPadre");

		if (idCategoriaSubCatPadre != null) {
			setIdCategoriaSubCatPadre(idCategoriaSubCatPadre);
		}

		String descripcion = (String)attributes.get("descripcion");

		if (descripcion != null) {
			setDescripcion(descripcion);
		}
	}

	@JSON
	public long getIdCategoriaSubCat() {
		return _idCategoriaSubCat;
	}

	public void setIdCategoriaSubCat(long idCategoriaSubCat) {
		_idCategoriaSubCat = idCategoriaSubCat;
	}

	@JSON
	public Integer getIdCategoriaSubCatPadre() {
		return _idCategoriaSubCatPadre;
	}

	public void setIdCategoriaSubCatPadre(Integer idCategoriaSubCatPadre) {
		_idCategoriaSubCatPadre = idCategoriaSubCatPadre;
	}

	@JSON
	public String getDescripcion() {
		if (_descripcion == null) {
			return StringPool.BLANK;
		}
		else {
			return _descripcion;
		}
	}

	public void setDescripcion(String descripcion) {
		_descripcion = descripcion;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			CategoriaSubcategoria.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CategoriaSubcategoria toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (CategoriaSubcategoria)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CategoriaSubcategoriaImpl categoriaSubcategoriaImpl = new CategoriaSubcategoriaImpl();

		categoriaSubcategoriaImpl.setIdCategoriaSubCat(getIdCategoriaSubCat());
		categoriaSubcategoriaImpl.setIdCategoriaSubCatPadre(getIdCategoriaSubCatPadre());
		categoriaSubcategoriaImpl.setDescripcion(getDescripcion());

		categoriaSubcategoriaImpl.resetOriginalValues();

		return categoriaSubcategoriaImpl;
	}

	public int compareTo(CategoriaSubcategoria categoriaSubcategoria) {
		long primaryKey = categoriaSubcategoria.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		CategoriaSubcategoria categoriaSubcategoria = null;

		try {
			categoriaSubcategoria = (CategoriaSubcategoria)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = categoriaSubcategoria.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<CategoriaSubcategoria> toCacheModel() {
		CategoriaSubcategoriaCacheModel categoriaSubcategoriaCacheModel = new CategoriaSubcategoriaCacheModel();

		categoriaSubcategoriaCacheModel.idCategoriaSubCat = getIdCategoriaSubCat();

		categoriaSubcategoriaCacheModel.idCategoriaSubCatPadre = getIdCategoriaSubCatPadre();

		categoriaSubcategoriaCacheModel.descripcion = getDescripcion();

		String descripcion = categoriaSubcategoriaCacheModel.descripcion;

		if ((descripcion != null) && (descripcion.length() == 0)) {
			categoriaSubcategoriaCacheModel.descripcion = null;
		}

		return categoriaSubcategoriaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{idCategoriaSubCat=");
		sb.append(getIdCategoriaSubCat());
		sb.append(", idCategoriaSubCatPadre=");
		sb.append(getIdCategoriaSubCatPadre());
		sb.append(", descripcion=");
		sb.append(getDescripcion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.ext.portlet.halcon.model.CategoriaSubcategoria");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idCategoriaSubCat</column-name><column-value><![CDATA[");
		sb.append(getIdCategoriaSubCat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idCategoriaSubCatPadre</column-name><column-value><![CDATA[");
		sb.append(getIdCategoriaSubCatPadre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descripcion</column-name><column-value><![CDATA[");
		sb.append(getDescripcion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = CategoriaSubcategoria.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			CategoriaSubcategoria.class
		};
	private long _idCategoriaSubCat;
	private Integer _idCategoriaSubCatPadre;
	private String _descripcion;
	private CategoriaSubcategoria _escapedModelProxy;
}